{"version":3,"file":"static/js/371.7b5b0125.chunk.js","mappings":"gPAEaA,EAAQC,EAAAA,EAAAA,MAAH,8P,SCclB,EAdkB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAC7B,OACE,SAACH,EAAD,CACEI,KAAK,QACLC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,MAAON,EACPD,SAAU,SAAAQ,GAAC,OAAIR,EAASQ,EAAEC,OAAOF,MAAtB,GAGhB,E,SCZYG,EAAOX,EAAAA,EAAAA,GAAH,0GCmBjB,EAlBoB,SAAC,GAAe,IAAbY,EAAY,EAAZA,MACfC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,+BACE,SAACH,EAAD,UACGC,EAAMG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACT,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMP,GAAlC,SACGI,KAFID,EADA,OAUlB,ECYD,EAzBe,WAAO,IAAD,EACnB,GAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAc3C,OAPAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAYH,GAAOI,MAAK,SAAAC,GACtB,IAAQC,EAAYD,EAAZC,QACRV,EAAUU,EACX,GACF,GAAE,CAACN,KAGF,iCACE,SAAC,EAAD,CAAW1B,SAdW,SAAA0B,GAExBD,EAD6B,KAAVC,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEhD,EAW2CzB,WAAYyB,KACpD,SAAC,EAAD,CAAaf,MAAOU,MAGzB,C,8LC3BKY,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAa,mCAAG,oGACGD,EAAAA,EAAAA,IAAA,qBAAgC,CACrDE,OAAQ,CACNC,QAASJ,KAHO,cACdF,EADc,yBAMbA,EAASO,KAAKN,SAND,2CAAH,qDASbH,EAAW,mCAAG,WAAMU,GAAN,uFACKL,EAAAA,EAAAA,IAAA,eAA0B,CAC/CE,OAAQ,CACNC,QAASJ,EACTP,MAAOa,KAJO,cACZR,EADY,yBAOXA,EAASO,MAPE,2CAAH,sDAUXE,EAAiB,mCAAG,WAAMzB,GAAN,uFACDmB,EAAAA,EAAAA,IAAA,gBAAmBnB,GAAM,CAC9CqB,OAAQ,CACNC,QAASJ,KAHW,cAClBF,EADkB,yBAMjBA,EAASO,MANQ,2CAAH,sDASjBG,EAAS,mCAAG,WAAM1B,GAAN,uFACOmB,EAAAA,EAAAA,IAAA,gBAAmBnB,EAAnB,YAAiC,CACtDqB,OAAQ,CACNC,QAASJ,KAHG,cACVF,EADU,yBAMTA,EAASO,MANA,2CAAH,sDASTI,EAAY,mCAAG,WAAM3B,GAAN,uFACImB,EAAAA,EAAAA,IAAA,gBAAmBnB,EAAnB,YAAiC,CACtDqB,OAAQ,CACNC,QAASJ,KAHM,cACbF,EADa,yBAMZA,EAASO,MANG,2CAAH,qD","sources":["components/SearchBar/SearchBar.styled.jsx","components/SearchBar/SearchBar.jsx","components/FoundMovies/FoundMovies.styled.jsx","components/FoundMovies/FoundMovies.jsx","pages/Movies.jsx","service/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n\n  margin-bottom: 24px;\n  padding: 8px 4px;\n\n  &:placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { Input } from './SearchBar.styled';\n\nconst SearchBar = ({ onChange, inputValue }) => {\n  return (\n    <Input\n      name=\"query\"\n      type=\"text\"\n      autocomplete=\"off\"\n      autoFocus\n      placeholder=\"Search movies\"\n      value={inputValue}\n      onChange={e => onChange(e.target.value)}\n    />\n  );\n};\n\nexport default SearchBar;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  list-style: none;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { List } from './FoundMovies.styled';\n\nconst FoundMovies = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <List>\n        {films.map(({ id, title }) => (\n          <li key={id}>\n            <Link to={`${id}`} state={{ from: location }}>\n              {title}\n            </Link>\n          </li>\n        ))}\n      </List>\n    </>\n  );\n};\n\nexport default FoundMovies;\n","import { useEffect, useState } from 'react';\nimport { fetchMovies } from '../service/api';\nimport { useSearchParams } from 'react-router-dom';\nimport SearchBar from '../components/SearchBar/SearchBar';\nimport FoundMovies from 'components/FoundMovies/FoundMovies';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    fetchMovies(query).then(response => {\n      const { results } = response;\n      setMovies(results);\n    });\n  }, [query]);\n\n  return (\n    <>\n      <SearchBar onChange={updateQueryString} inputValue={query} />\n      <FoundMovies films={movies} />\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '84acf63cced10e4fb48b321130e5907f';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nconst fetchMovies = async searchQuery => {\n  const response = await axios.get(`search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: searchQuery,\n    },\n  });\n  return response.data;\n};\n\nconst fetchMovieDetails = async id => {\n  const response = await axios.get(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nconst fetchCast = async id => {\n  const response = await axios.get(`movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nconst fetchReviews = async id => {\n  const response = await axios.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport {\n  fetchTrending,\n  fetchMovies,\n  fetchMovieDetails,\n  fetchCast,\n  fetchReviews,\n};\n"],"names":["Input","styled","onChange","inputValue","name","type","autocomplete","autoFocus","placeholder","value","e","target","List","films","location","useLocation","map","id","title","to","state","from","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMovies","then","response","results","API_KEY","axios","fetchTrending","params","api_key","data","searchQuery","fetchMovieDetails","fetchCast","fetchReviews"],"sourceRoot":""}