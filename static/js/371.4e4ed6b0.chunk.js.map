{"version":3,"file":"static/js/371.4e4ed6b0.chunk.js","mappings":"mOAEMA,EAAOC,EAAAA,EAAAA,KAAH,wLAWJC,EAASD,EAAAA,EAAAA,OAAH,iGAONE,EAAQF,EAAAA,EAAAA,MAAH,oO,SCHX,EAfkB,SAAC,GAAkB,IAAhBG,EAAe,EAAfA,SACnB,OACE,UAACJ,EAAD,CAAMI,SAAUA,EAAhB,WACE,SAACD,EAAD,CACEE,KAAK,QACLC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,mBAEd,SAACP,EAAD,CAAQI,KAAK,SAAb,sBAGL,E,0BCbYI,EAAOT,EAAAA,EAAAA,GAAH,0GCmBjB,EAlBoB,SAAC,GAAe,IAAbU,EAAY,EAAZA,MACfC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,+BACE,SAACH,EAAD,UACGC,EAAMG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACT,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMP,GAAlC,SACGI,KAFID,EADA,OAUlB,ECaD,EA1Be,WACb,OAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,SAe/B,OAPAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAYH,GAAOI,MAAK,SAAAC,GACtB,IAAQC,EAAYD,EAAZC,QACRV,EAAUU,EACX,GACF,GAAE,CAACN,KAGF,iCACE,SAAC,EAAD,CAAWtB,SAfM,SAAA6B,GACnBA,EAAEC,iBAEFT,EAAgB,CAAEC,MAAOO,EAAEE,OAAOT,MAAMU,OACzC,KAYG,SAAC,EAAD,CAAazB,MAAOU,MAGzB,C,8LC5BKgB,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAa,mCAAG,oGACGD,EAAAA,EAAAA,IAAA,qBAAgC,CACrDE,OAAQ,CACNC,QAASJ,KAHO,cACdN,EADc,yBAMbA,EAASW,KAAKV,SAND,2CAAH,qDASbH,EAAW,mCAAG,WAAMc,GAAN,uFACKL,EAAAA,EAAAA,IAAA,eAA0B,CAC/CE,OAAQ,CACNC,QAASJ,EACTX,MAAOiB,KAJO,cACZZ,EADY,yBAOXA,EAASW,MAPE,2CAAH,sDAUXE,EAAiB,mCAAG,WAAM7B,GAAN,uFACDuB,EAAAA,EAAAA,IAAA,gBAAmBvB,GAAM,CAC9CyB,OAAQ,CACNC,QAASJ,KAHW,cAClBN,EADkB,yBAMjBA,EAASW,MANQ,2CAAH,sDASjBG,EAAS,mCAAG,WAAM9B,GAAN,uFACOuB,EAAAA,EAAAA,IAAA,gBAAmBvB,EAAnB,YAAiC,CACtDyB,OAAQ,CACNC,QAASJ,KAHG,cACVN,EADU,yBAMTA,EAASW,MANA,2CAAH,sDASTI,EAAY,mCAAG,WAAM/B,GAAN,uFACIuB,EAAAA,EAAAA,IAAA,gBAAmBvB,EAAnB,YAAiC,CACtDyB,OAAQ,CACNC,QAASJ,KAHM,cACbN,EADa,yBAMZA,EAASW,MANG,2CAAH,qD","sources":["components/SearchBar/SearchBar.styled.jsx","components/SearchBar/SearchBar.jsx","components/FoundMovies/FoundMovies.styled.jsx","components/FoundMovies/FoundMovies.jsx","pages/Movies.jsx","service/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  display: flex;\n  align-items: center;\n  max-width: 300px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n\n  margin-bottom: 24px;\n`;\n\nconst Button = styled.button`\n  padding: 8px 4px;\n  border: 0;\n  cursor: pointer;\n  outline: none;\n`;\n\nconst Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding: 8px 4px;\n\n  &:placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport { Form, Button, Input };\n","import { Form, Button, Input } from './SearchBar.styled';\n\nconst SearchBar = ({ onSubmit }) => {\n  return (\n    <Form onSubmit={onSubmit}>\n      <Input\n        name=\"query\"\n        type=\"text\"\n        autocomplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n      />\n      <Button type=\"submit\">Search</Button>\n    </Form>\n  );\n};\n\nexport default SearchBar;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  list-style: none;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { List } from './FoundMovies.styled';\n\nconst FoundMovies = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <List>\n        {films.map(({ id, title }) => (\n          <li key={id}>\n            <Link to={`${id}`} state={{ from: location }}>\n              {title}\n            </Link>\n          </li>\n        ))}\n      </List>\n    </>\n  );\n};\n\nexport default FoundMovies;\n","import { useEffect, useState } from 'react';\nimport SearchBar from '../components/SearchBar/SearchBar';\nimport { fetchMovies } from '../service/api';\nimport { useSearchParams } from 'react-router-dom';\nimport FoundMovies from 'components/FoundMovies/FoundMovies';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    setSearchParams({ query: e.target.query.value });\n  };\n\n  useEffect(() => {\n    fetchMovies(query).then(response => {\n      const { results } = response;\n      setMovies(results);\n    });\n  }, [query]);\n\n  return (\n    <>\n      <SearchBar onSubmit={handleSubmit} />\n      <FoundMovies films={movies} />\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '84acf63cced10e4fb48b321130e5907f';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nconst fetchMovies = async searchQuery => {\n  const response = await axios.get(`search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: searchQuery,\n    },\n  });\n  return response.data;\n};\n\nconst fetchMovieDetails = async id => {\n  const response = await axios.get(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nconst fetchCast = async id => {\n  const response = await axios.get(`movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nconst fetchReviews = async id => {\n  const response = await axios.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport {\n  fetchTrending,\n  fetchMovies,\n  fetchMovieDetails,\n  fetchCast,\n  fetchReviews,\n};\n"],"names":["Form","styled","Button","Input","onSubmit","name","type","autocomplete","autoFocus","placeholder","List","films","location","useLocation","map","id","title","to","state","from","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMovies","then","response","results","e","preventDefault","target","value","API_KEY","axios","fetchTrending","params","api_key","data","searchQuery","fetchMovieDetails","fetchCast","fetchReviews"],"sourceRoot":""}